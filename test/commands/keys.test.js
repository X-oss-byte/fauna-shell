const {expect, test} = require('@oclif/test')
const {withOpts} = require('../helpers/utils.js')

describe('keys test', () => {
  test
  .stdout()
  .command(withOpts(['list-keys']))
  .add('output_keys', ctx => {
    var lines = ctx.stdout.split('\n')
    lines.splice(0, 1)
    return lines
  })
  .it('runs list-keys', ctx => {
    expect(Array.isArray(ctx.output_keys)).to.be.true
  })

  test
  .command(withOpts(['create-key', 'testdb']))
  .catch(err => {
    expect(err.message).to.contain("Database 'testdb' doesn't exist")
    expect(err.oclif.exit).to.equal(1)
  })
  .it('runs create-key testdb')

  test
  .stdout()
  .command(withOpts(['create-database', 'testdb']))
  .it('prepares db for next test')

  test
  .stdout()
  .command(withOpts(['create-key', 'testdb']))
  .it('runs create-key testdb', ctx => {
    expect(ctx.stdout).to.contain("created key for database 'testdb' with role 'admin'.")
  })

  test
  .stdout()
  .command(withOpts(['create-key', 'testdb', 'server']))
  .it('runs create-key testdb with a different role', ctx => {
    expect(ctx.stdout).to.contain("created key for database 'testdb' with role 'server'.")
  })

  test
  .stdout()
  .command(withOpts(['create-key', 'testdb', 'non-existing-role']))
  .catch(err => {
    expect(err.message).to.contain('Expected non-existing-role to be one of')
    //the actual error code is 2, but this is generated by oclif, so we don't want to be coupled to it.
    expect(err.oclif.exit).to.not.equal(0)
  })
  .it('runs create-key testdb with a wrong role')

  test
  .stdout()
  .command(withOpts(['delete-database', 'testdb']))
  .it('cleans-up test environment')
})
